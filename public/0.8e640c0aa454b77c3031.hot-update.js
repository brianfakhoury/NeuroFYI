webpackHotUpdate(0,{

/***/ 360:
/* unknown exports provided */
/* all exports used */
/*!***********************************************!*\
  !*** ./frontend/components/play/Landscape.js ***!
  \***********************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = __webpack_require__(/*! react */ 1);\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = __webpack_require__(/*! prop-types */ 2);\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _three = __webpack_require__(/*! three */ 197);\n\nvar THREE = _interopRequireWildcard(_three);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar Landscape = function (_React$Component) {\n    _inherits(Landscape, _React$Component);\n\n    function Landscape(props) {\n        _classCallCheck(this, Landscape);\n\n        return _possibleConstructorReturn(this, (Landscape.__proto__ || Object.getPrototypeOf(Landscape)).call(this, props));\n    }\n\n    _createClass(Landscape, [{\n        key: 'componentWillMount',\n        value: function componentWillMount() {\n            createLandscape();\n        }\n    }, {\n        key: 'render',\n        value: function render() {\n            return _react2.default.createElement('canvas', { id: 'canvas3' });\n        }\n    }]);\n\n    return Landscape;\n}(_react2.default.Component);\n\nexports.default = Landscape;\n\n\nfunction createLandscape() {\n    setTimeout(function () {\n        var SimplexNoise = function SimplexNoise(r) {\n            if (r == undefined) r = Math;\n            this.grad3 = [[1, 1, 0], [-1, 1, 0], [1, -1, 0], [-1, -1, 0], [1, 0, 1], [-1, 0, 1], [1, 0, -1], [-1, 0, -1], [0, 1, 1], [0, -1, 1], [0, 1, -1], [0, -1, -1]];\n\n            this.grad4 = [[0, 1, 1, 1], [0, 1, 1, -1], [0, 1, -1, 1], [0, 1, -1, -1], [0, -1, 1, 1], [0, -1, 1, -1], [0, -1, -1, 1], [0, -1, -1, -1], [1, 0, 1, 1], [1, 0, 1, -1], [1, 0, -1, 1], [1, 0, -1, -1], [-1, 0, 1, 1], [-1, 0, 1, -1], [-1, 0, -1, 1], [-1, 0, -1, -1], [1, 1, 0, 1], [1, 1, 0, -1], [1, -1, 0, 1], [1, -1, 0, -1], [-1, 1, 0, 1], [-1, 1, 0, -1], [-1, -1, 0, 1], [-1, -1, 0, -1], [1, 1, 1, 0], [1, 1, -1, 0], [1, -1, 1, 0], [1, -1, -1, 0], [-1, 1, 1, 0], [-1, 1, -1, 0], [-1, -1, 1, 0], [-1, -1, -1, 0]];\n\n            this.p = [];\n            for (var i = 0; i < 256; i++) {\n                this.p[i] = Math.floor(r.random() * 256);\n            }\n            // To remove the need for index wrapping, double the permutation table length\n            this.perm = [];\n            for (var i = 0; i < 512; i++) {\n                this.perm[i] = this.p[i & 255];\n            }\n\n            // A lookup table to traverse the simplex around a given point in 4D.\n            // Details can be found where this table is used, in the 4D noise method.\n            this.simplex = [[0, 1, 2, 3], [0, 1, 3, 2], [0, 0, 0, 0], [0, 2, 3, 1], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [1, 2, 3, 0], [0, 2, 1, 3], [0, 0, 0, 0], [0, 3, 1, 2], [0, 3, 2, 1], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [1, 3, 2, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [1, 2, 0, 3], [0, 0, 0, 0], [1, 3, 0, 2], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [2, 3, 0, 1], [2, 3, 1, 0], [1, 0, 2, 3], [1, 0, 3, 2], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [2, 0, 3, 1], [0, 0, 0, 0], [2, 1, 3, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [2, 0, 1, 3], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [3, 0, 1, 2], [3, 0, 2, 1], [0, 0, 0, 0], [3, 1, 2, 0], [2, 1, 0, 3], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [3, 1, 0, 2], [0, 0, 0, 0], [3, 2, 0, 1], [3, 2, 1, 0]];\n        };\n\n        SimplexNoise.prototype.dot = function (g, x, y) {\n            return g[0] * x + g[1] * y;\n        };\n\n        SimplexNoise.prototype.dot3 = function (g, x, y, z) {\n            return g[0] * x + g[1] * y + g[2] * z;\n        };\n\n        SimplexNoise.prototype.dot4 = function (g, x, y, z, w) {\n            return g[0] * x + g[1] * y + g[2] * z + g[3] * w;\n        };\n\n        SimplexNoise.prototype.noise = function (xin, yin) {\n            var n0, n1, n2; // Noise contributions from the three corners\n            // Skew the input space to determine which simplex cell we're in\n            var F2 = 0.5 * (Math.sqrt(3.0) - 1.0);\n            var s = (xin + yin) * F2; // Hairy factor for 2D\n            var i = Math.floor(xin + s);\n            var j = Math.floor(yin + s);\n            var G2 = (3.0 - Math.sqrt(3.0)) / 6.0;\n            var t = (i + j) * G2;\n            var X0 = i - t; // Unskew the cell origin back to (x,y) space\n            var Y0 = j - t;\n            var x0 = xin - X0; // The x,y distances from the cell origin\n            var y0 = yin - Y0;\n            // For the 2D case, the simplex shape is an equilateral triangle.\n            // Determine which simplex we are in.\n            var i1, j1; // Offsets for second (middle) corner of simplex in (i,j) coords\n            if (x0 > y0) {\n                i1 = 1;\n                j1 = 0;\n            } // lower triangle, XY order: (0,0)->(1,0)->(1,1)\n            else {\n                    i1 = 0;\n                    j1 = 1;\n                } // upper triangle, YX order: (0,0)->(0,1)->(1,1)\n            // A step of (1,0) in (i,j) means a step of (1-c,-c) in (x,y), and\n            // a step of (0,1) in (i,j) means a step of (-c,1-c) in (x,y), where\n            // c = (3-sqrt(3))/6\n            var x1 = x0 - i1 + G2; // Offsets for middle corner in (x,y) unskewed coords\n            var y1 = y0 - j1 + G2;\n            var x2 = x0 - 1.0 + 2.0 * G2; // Offsets for last corner in (x,y) unskewed coords\n            var y2 = y0 - 1.0 + 2.0 * G2;\n            // Work out the hashed gradient indices of the three simplex corners\n            var ii = i & 255;\n            var jj = j & 255;\n            var gi0 = this.perm[ii + this.perm[jj]] % 12;\n            var gi1 = this.perm[ii + i1 + this.perm[jj + j1]] % 12;\n            var gi2 = this.perm[ii + 1 + this.perm[jj + 1]] % 12;\n            // Calculate the contribution from the three corners\n            var t0 = 0.5 - x0 * x0 - y0 * y0;\n            if (t0 < 0) n0 = 0.0;else {\n                t0 *= t0;\n                n0 = t0 * t0 * this.dot(this.grad3[gi0], x0, y0); // (x,y) of grad3 used for 2D gradient\n            }\n            var t1 = 0.5 - x1 * x1 - y1 * y1;\n            if (t1 < 0) n1 = 0.0;else {\n                t1 *= t1;\n                n1 = t1 * t1 * this.dot(this.grad3[gi1], x1, y1);\n            }\n            var t2 = 0.5 - x2 * x2 - y2 * y2;\n            if (t2 < 0) n2 = 0.0;else {\n                t2 *= t2;\n                n2 = t2 * t2 * this.dot(this.grad3[gi2], x2, y2);\n            }\n            // Add contributions from each corner to get the final noise value.\n            // The result is scaled to return values in the interval [-1,1].\n            return 70.0 * (n0 + n1 + n2);\n        };\n\n        // 3D simplex noise\n        SimplexNoise.prototype.noise3d = function (xin, yin, zin) {\n            var n0, n1, n2, n3; // Noise contributions from the four corners\n            // Skew the input space to determine which simplex cell we're in\n            var F3 = 1.0 / 3.0;\n            var s = (xin + yin + zin) * F3; // Very nice and simple skew factor for 3D\n            var i = Math.floor(xin + s);\n            var j = Math.floor(yin + s);\n            var k = Math.floor(zin + s);\n            var G3 = 1.0 / 6.0; // Very nice and simple unskew factor, too\n            var t = (i + j + k) * G3;\n            var X0 = i - t; // Unskew the cell origin back to (x,y,z) space\n            var Y0 = j - t;\n            var Z0 = k - t;\n            var x0 = xin - X0; // The x,y,z distances from the cell origin\n            var y0 = yin - Y0;\n            var z0 = zin - Z0;\n            // For the 3D case, the simplex shape is a slightly irregular tetrahedron.\n            // Determine which simplex we are in.\n            var i1, j1, k1; // Offsets for second corner of simplex in (i,j,k) coords\n            var i2, j2, k2; // Offsets for third corner of simplex in (i,j,k) coords\n            if (x0 >= y0) {\n                if (y0 >= z0) {\n                    i1 = 1;\n                    j1 = 0;\n                    k1 = 0;\n                    i2 = 1;\n                    j2 = 1;\n                    k2 = 0;\n                } // X Y Z order\n                else if (x0 >= z0) {\n                        i1 = 1;\n                        j1 = 0;\n                        k1 = 0;\n                        i2 = 1;\n                        j2 = 0;\n                        k2 = 1;\n                    } // X Z Y order\n                    else {\n                            i1 = 0;\n                            j1 = 0;\n                            k1 = 1;\n                            i2 = 1;\n                            j2 = 0;\n                            k2 = 1;\n                        } // Z X Y order\n            } else {\n                // x0<y0\n                if (y0 < z0) {\n                    i1 = 0;\n                    j1 = 0;\n                    k1 = 1;\n                    i2 = 0;\n                    j2 = 1;\n                    k2 = 1;\n                } // Z Y X order\n                else if (x0 < z0) {\n                        i1 = 0;\n                        j1 = 1;\n                        k1 = 0;\n                        i2 = 0;\n                        j2 = 1;\n                        k2 = 1;\n                    } // Y Z X order\n                    else {\n                            i1 = 0;\n                            j1 = 1;\n                            k1 = 0;\n                            i2 = 1;\n                            j2 = 1;\n                            k2 = 0;\n                        } // Y X Z order\n            }\n            // A step of (1,0,0) in (i,j,k) means a step of (1-c,-c,-c) in (x,y,z),\n            // a step of (0,1,0) in (i,j,k) means a step of (-c,1-c,-c) in (x,y,z), and\n            // a step of (0,0,1) in (i,j,k) means a step of (-c,-c,1-c) in (x,y,z), where\n            // c = 1/6.\n            var x1 = x0 - i1 + G3; // Offsets for second corner in (x,y,z) coords\n            var y1 = y0 - j1 + G3;\n            var z1 = z0 - k1 + G3;\n            var x2 = x0 - i2 + 2.0 * G3; // Offsets for third corner in (x,y,z) coords\n            var y2 = y0 - j2 + 2.0 * G3;\n            var z2 = z0 - k2 + 2.0 * G3;\n            var x3 = x0 - 1.0 + 3.0 * G3; // Offsets for last corner in (x,y,z) coords\n            var y3 = y0 - 1.0 + 3.0 * G3;\n            var z3 = z0 - 1.0 + 3.0 * G3;\n            // Work out the hashed gradient indices of the four simplex corners\n            var ii = i & 255;\n            var jj = j & 255;\n            var kk = k & 255;\n            var gi0 = this.perm[ii + this.perm[jj + this.perm[kk]]] % 12;\n            var gi1 = this.perm[ii + i1 + this.perm[jj + j1 + this.perm[kk + k1]]] % 12;\n            var gi2 = this.perm[ii + i2 + this.perm[jj + j2 + this.perm[kk + k2]]] % 12;\n            var gi3 = this.perm[ii + 1 + this.perm[jj + 1 + this.perm[kk + 1]]] % 12;\n            // Calculate the contribution from the four corners\n            var t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0;\n            if (t0 < 0) n0 = 0.0;else {\n                t0 *= t0;\n                n0 = t0 * t0 * this.dot3(this.grad3[gi0], x0, y0, z0);\n            }\n            var t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1;\n            if (t1 < 0) n1 = 0.0;else {\n                t1 *= t1;\n                n1 = t1 * t1 * this.dot3(this.grad3[gi1], x1, y1, z1);\n            }\n            var t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2;\n            if (t2 < 0) n2 = 0.0;else {\n                t2 *= t2;\n                n2 = t2 * t2 * this.dot3(this.grad3[gi2], x2, y2, z2);\n            }\n            var t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3;\n            if (t3 < 0) n3 = 0.0;else {\n                t3 *= t3;\n                n3 = t3 * t3 * this.dot3(this.grad3[gi3], x3, y3, z3);\n            }\n            // Add contributions from each corner to get the final noise value.\n            // The result is scaled to stay just inside [-1,1]\n            return 32.0 * (n0 + n1 + n2 + n3);\n        };\n\n        // 4D simplex noise\n        SimplexNoise.prototype.noise4d = function (x, y, z, w) {\n            // For faster and easier lookups\n            var grad4 = this.grad4;\n            var simplex = this.simplex;\n            var perm = this.perm;\n\n            // The skewing and unskewing factors are hairy again for the 4D case\n            var F4 = (Math.sqrt(5.0) - 1.0) / 4.0;\n            var G4 = (5.0 - Math.sqrt(5.0)) / 20.0;\n            var n0, n1, n2, n3, n4; // Noise contributions from the five corners\n            // Skew the (x,y,z,w) space to determine which cell of 24 simplices we're in\n            var s = (x + y + z + w) * F4; // Factor for 4D skewing\n            var i = Math.floor(x + s);\n            var j = Math.floor(y + s);\n            var k = Math.floor(z + s);\n            var l = Math.floor(w + s);\n            var t = (i + j + k + l) * G4; // Factor for 4D unskewing\n            var X0 = i - t; // Unskew the cell origin back to (x,y,z,w) space\n            var Y0 = j - t;\n            var Z0 = k - t;\n            var W0 = l - t;\n            var x0 = x - X0; // The x,y,z,w distances from the cell origin\n            var y0 = y - Y0;\n            var z0 = z - Z0;\n            var w0 = w - W0;\n\n            // For the 4D case, the simplex is a 4D shape I won't even try to describe.\n            // To find out which of the 24 possible simplices we're in, we need to\n            // determine the magnitude ordering of x0, y0, z0 and w0.\n            // The method below is a good way of finding the ordering of x,y,z,w and\n            // then find the correct traversal order for the simplex we’re in.\n            // First, six pair-wise comparisons are performed between each possible pair\n            // of the four coordinates, and the results are used to add up binary bits\n            // for an integer index.\n            var c1 = x0 > y0 ? 32 : 0;\n            var c2 = x0 > z0 ? 16 : 0;\n            var c3 = y0 > z0 ? 8 : 0;\n            var c4 = x0 > w0 ? 4 : 0;\n            var c5 = y0 > w0 ? 2 : 0;\n            var c6 = z0 > w0 ? 1 : 0;\n            var c = c1 + c2 + c3 + c4 + c5 + c6;\n            var i1, j1, k1, l1; // The integer offsets for the second simplex corner\n            var i2, j2, k2, l2; // The integer offsets for the third simplex corner\n            var i3, j3, k3, l3; // The integer offsets for the fourth simplex corner\n            // simplex[c] is a 4-vector with the numbers 0, 1, 2 and 3 in some order.\n            // Many values of c will never occur, since e.g. x>y>z>w makes x<z, y<w and x<w\n            // impossible. Only the 24 indices which have non-zero entries make any sense.\n            // We use a thresholding to set the coordinates in turn from the largest magnitude.\n            // The number 3 in the \"simplex\" array is at the position of the largest coordinate.\n            i1 = simplex[c][0] >= 3 ? 1 : 0;\n            j1 = simplex[c][1] >= 3 ? 1 : 0;\n            k1 = simplex[c][2] >= 3 ? 1 : 0;\n            l1 = simplex[c][3] >= 3 ? 1 : 0;\n            // The number 2 in the \"simplex\" array is at the second largest coordinate.\n            i2 = simplex[c][0] >= 2 ? 1 : 0;\n            j2 = simplex[c][1] >= 2 ? 1 : 0;\n            k2 = simplex[c][2] >= 2 ? 1 : 0;\n            l2 = simplex[c][3] >= 2 ? 1 : 0;\n            // The number 1 in the \"simplex\" array is at the second smallest coordinate.\n            i3 = simplex[c][0] >= 1 ? 1 : 0;\n            j3 = simplex[c][1] >= 1 ? 1 : 0;\n            k3 = simplex[c][2] >= 1 ? 1 : 0;\n            l3 = simplex[c][3] >= 1 ? 1 : 0;\n            // The fifth corner has all coordinate offsets = 1, so no need to look that up.\n            var x1 = x0 - i1 + G4; // Offsets for second corner in (x,y,z,w) coords\n            var y1 = y0 - j1 + G4;\n            var z1 = z0 - k1 + G4;\n            var w1 = w0 - l1 + G4;\n            var x2 = x0 - i2 + 2.0 * G4; // Offsets for third corner in (x,y,z,w) coords\n            var y2 = y0 - j2 + 2.0 * G4;\n            var z2 = z0 - k2 + 2.0 * G4;\n            var w2 = w0 - l2 + 2.0 * G4;\n            var x3 = x0 - i3 + 3.0 * G4; // Offsets for fourth corner in (x,y,z,w) coords\n            var y3 = y0 - j3 + 3.0 * G4;\n            var z3 = z0 - k3 + 3.0 * G4;\n            var w3 = w0 - l3 + 3.0 * G4;\n            var x4 = x0 - 1.0 + 4.0 * G4; // Offsets for last corner in (x,y,z,w) coords\n            var y4 = y0 - 1.0 + 4.0 * G4;\n            var z4 = z0 - 1.0 + 4.0 * G4;\n            var w4 = w0 - 1.0 + 4.0 * G4;\n            // Work out the hashed gradient indices of the five simplex corners\n            var ii = i & 255;\n            var jj = j & 255;\n            var kk = k & 255;\n            var ll = l & 255;\n            var gi0 = perm[ii + perm[jj + perm[kk + perm[ll]]]] % 32;\n            var gi1 = perm[ii + i1 + perm[jj + j1 + perm[kk + k1 + perm[ll + l1]]]] % 32;\n            var gi2 = perm[ii + i2 + perm[jj + j2 + perm[kk + k2 + perm[ll + l2]]]] % 32;\n            var gi3 = perm[ii + i3 + perm[jj + j3 + perm[kk + k3 + perm[ll + l3]]]] % 32;\n            var gi4 = perm[ii + 1 + perm[jj + 1 + perm[kk + 1 + perm[ll + 1]]]] % 32;\n            // Calculate the contribution from the five corners\n            var t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0 - w0 * w0;\n            if (t0 < 0) n0 = 0.0;else {\n                t0 *= t0;\n                n0 = t0 * t0 * this.dot4(grad4[gi0], x0, y0, z0, w0);\n            }\n            var t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1 - w1 * w1;\n            if (t1 < 0) n1 = 0.0;else {\n                t1 *= t1;\n                n1 = t1 * t1 * this.dot4(grad4[gi1], x1, y1, z1, w1);\n            }\n            var t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2 - w2 * w2;\n            if (t2 < 0) n2 = 0.0;else {\n                t2 *= t2;\n                n2 = t2 * t2 * this.dot4(grad4[gi2], x2, y2, z2, w2);\n            }\n            var t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3 - w3 * w3;\n            if (t3 < 0) n3 = 0.0;else {\n                t3 *= t3;\n                n3 = t3 * t3 * this.dot4(grad4[gi3], x3, y3, z3, w3);\n            }\n            var t4 = 0.6 - x4 * x4 - y4 * y4 - z4 * z4 - w4 * w4;\n            if (t4 < 0) n4 = 0.0;else {\n                t4 *= t4;\n                n4 = t4 * t4 * this.dot4(grad4[gi4], x4, y4, z4, w4);\n            }\n            // Sum up and scale the result to cover the range [-1,1]\n            return 27.0 * (n0 + n1 + n2 + n3 + n4);\n        };\n\n        var THREEx = THREEx || {};\n\n        THREEx.Terrain = {};\n\n        /**\n         * allocate the heightmap\n         *\n         * @param  {Number} width the width of the heightmap\n         * @param  {Number} depth the depth of the heightmap\n         * @return {Array} the allocated heightmap\n         */\n        THREEx.Terrain.allocateHeightMap = function (width, depth) {\n            var ArrayClass = THREEx.Terrain.allocateHeightMap.ArrayClass;\n            var heightMap = new Array(width);\n            for (var x = 0; x < width; x++) {\n                heightMap[x] = new ArrayClass(depth);\n            }\n            return heightMap;\n        };\n        THREEx.Terrain.allocateHeightMap.ArrayClass = window.Float64Array || window.Array;\n\n        /**\n         * generate a heightmap using a simplex noise\n         * @todo make it it tunable... how ?\n         *\n         * @param  {Array} heightMap the heightmap to store the data\n         */\n        THREEx.Terrain.simplexHeightMap = function (heightMap) {\n            // get heightMap dimensions\n            var width = heightMap.length;\n            var depth = heightMap[0].length;\n\n            var simplex = new SimplexNoise();\n            for (var x = 0; x < width; x++) {\n                for (var z = 0; z < depth; z++) {\n                    // compute the height\n                    var height = 0;\n                    var level = 8;\n                    height += (simplex.noise(x / level, z / level) / 2 + 0.5) * 0.125;\n                    level *= 3;\n                    height += (simplex.noise(x / level, z / level) / 2 + 0.5) * 0.25;\n                    level *= 2;\n                    height += (simplex.noise(x / level, z / level) / 2 + 0.5) * 0.5;\n                    level *= 2;\n                    height += (simplex.noise(x / level, z / level) / 2 + 0.5) * 1;\n                    height /= 1 + 0.5 + 0.25 + 0.125;\n                    // put the height in the heightMap\n                    heightMap[x][z] = height;\n                }\n            }\n        };\n\n        /**\n         * build a canvas 2d from a heightmap\n         * @param  {Array} heightMap heightmap\n         * @param  {HTMLCanvasElement|undefined} canvas  the destination canvas.\n         * @return {HTMLCanvasElement}           the canvas\n         */\n        THREEx.Terrain.heightMapToCanvas = function (heightMap, canvas) {\n            // get heightMap dimensions\n            var width = heightMap.length;\n            var depth = heightMap[0].length;\n            // create canvas\n            canvas = canvas || document.createElement('canvas');\n            canvas.width = width;\n            canvas.height = depth;\n            var context = canvas.getContext(\"2d\");\n            // loop on each pixel of the canvas\n            for (var x = 0; x < canvas.width; x++) {\n                for (var y = 0; y < canvas.height; y++) {\n                    var height = heightMap[x][y];\n                    var color = THREEx.Terrain.heightToColor(height);\n                    context.fillStyle = color.getStyle();\n                    context.fillRect(x, y, 1, 1);\n                }\n            }\n            // return the just built canvas\n            return canvas;\n        };\n\n        /**\n         * Build a THREE.PlaneGeometry based on a heightMap\n         *\n         * @param  {Array} heightMap the heightmap\n         * @return {THREE.Geometry}  the just built geometry\n         */\n        THREEx.Terrain.heightMapToPlaneGeometry = function (heightMap) {\n            // get heightMap dimensions\n            var width = heightMap.length;\n            var depth = heightMap[0].length;\n            // build geometry\n            var geometry = new THREEx.Terrain.PlaneGeometry(1, 1, width - 1, depth - 1);\n            // loop on each vertex of the geometry\n            for (var x = 0; x < width; x++) {\n                for (var z = 0; z < depth; z++) {\n                    // get the height from heightMap\n                    var height = heightMap[x][z];\n                    // set the vertex.z to a normalized height\n                    var vertex = geometry.vertices[x + z * width];\n                    vertex.z = (height - 0.5) * 2;\n                }\n            }\n            // notify the geometry need to update vertices\n            geometry.verticesNeedUpdate = true;\n            // notify the geometry need to update normals\n            geometry.computeFaceNormals();\n            geometry.computeVertexNormals();\n            geometry.normalsNeedUpdate = true;\n            // return the just built geometry\n            return geometry;\n        };\n\n        THREEx.Terrain.heightMapToHeight = function (heightMap, x, z) {\n            // get heightMap dimensions\n            var width = heightMap.length;\n            var depth = heightMap[0].length;\n            // sanity check - boundaries\n            console.assert(x >= 0 && x < width);\n            console.assert(z >= 0 && z < depth);\n\n            // get the delta within a single segment\n            var deltaX = x - Math.floor(x);\n            var deltaZ = z - Math.floor(z);\n\n            // get the height of each corner of the segment\n            var heightNW = heightMap[Math.floor(x)][Math.floor(z)];\n            var heightNE = heightMap[Math.ceil(x)][Math.floor(z)];\n            var heightSW = heightMap[Math.floor(x)][Math.ceil(z)];\n            var heightSE = heightMap[Math.ceil(x)][Math.ceil(z)];\n\n            // test in which triangle the point is. north-east or south-west\n            var inTriangleNE = deltaX > deltaZ ? true : false;\n            if (inTriangleNE) {\n                var height = heightNE + (heightNW - heightNE) * (1 - deltaX) + (heightSE - heightNE) * deltaZ;\n            } else {\n                var height = heightSW + (heightSE - heightSW) * deltaX + (heightNW - heightSW) * (1 - deltaZ);\n            }\n            // return the height\n            return height;\n        };\n\n        THREEx.Terrain.planeToHeightMapCoords = function (heightMap, planeMesh, x, z) {\n\n            // TODO assert no rotation in planeMesh\n            // - how can i check that ? with euler ?\n\n            var position = new THREE.Vector3(x, 0, z);\n\n            // set position relative to planeMesh position\n            position.sub(planeMesh.position);\n\n            // heightMap origin is at its top-left, while planeMesh origin is at its center\n            position.x += planeMesh.geometry.width / 2 * planeMesh.scale.x;\n            position.z += planeMesh.geometry.height / 2 * planeMesh.scale.y;\n\n            // normalize it from [0,1] for the heightmap\n            position.x /= planeMesh.geometry.width * planeMesh.scale.x;\n            position.z /= planeMesh.geometry.height * planeMesh.scale.y;\n\n            // get heightMap dimensions\n            var width = heightMap.length;\n            var depth = heightMap[0].length;\n\n            // convert it in heightMap coordinate\n            position.x *= width - 1;\n            position.z *= depth - 1;\n\n            position.y = THREEx.Terrain.heightMapToHeight(heightMap, position.x, position.z);\n            position.y = (position.y - 0.5) * 2;\n            position.y *= planeMesh.scale.z;\n\n            return position.y;\n        };\n\n        THREEx.Terrain.planeToHeightMapCoords0 = function (position, heightMap, planeMesh) {\n\n            // TODO assert no rotation in planeMesh\n            // - how can i check that ? with euler ?\n\n            // set position relative to planeMesh position\n            position.sub(planeMesh.position);\n\n            // heightMap origin is at its top-left, while planeMesh origin is at its center\n            position.x += planeMesh.geometry.width / 2;\n            position.z += planeMesh.geometry.height / 2;\n\n            // normalize it from [0,1] for the heightmap\n            position.x /= planeMesh.geometry.width;\n            position.z /= planeMesh.geometry.height;\n\n            // get heightMap dimensions\n            var width = heightMap.length;\n            var depth = heightMap[0].length;\n\n            // convert it in heightMap coordinate\n            position.x *= width - 1;\n            position.z *= depth - 1;\n\n            var height = THREEx.Terrain.heightMapToHeight(heightMap, position.x, position.z);\n            position.y = (height - 0.5) * 2;\n\n            return position;\n        };\n\n        /**\n         * Set the vertex color for a THREE.Geometry based on a heightMap\n         *\n         * @param  {Array} heightMap the heightmap\n         * @param  {THREE.Geometry} geometry  the geometry to set\n         */\n        THREEx.Terrain.heightMapToVertexColor = function (heightMap, geometry) {\n            // get heightMap dimensions\n            var width = heightMap.length;\n            var depth = heightMap[0].length;\n            // loop on each vertex of the geometry\n            var color = new THREE.Color();\n            for (var i = 0; i < geometry.faces.length; i++) {\n                var face = geometry.faces[i];\n                if (face instanceof THREE.Face4) {\n                    console.assert(face instanceof THREE.Face4);\n                    face.vertexColors.push(vertexIdxToColor(face.a).clone());\n                    face.vertexColors.push(vertexIdxToColor(face.b).clone());\n                    face.vertexColors.push(vertexIdxToColor(face.c).clone());\n                    face.vertexColors.push(vertexIdxToColor(face.d).clone());\n                } else if (face instanceof THREE.Face3) {\n                    console.assert(face instanceof THREE.Face3);\n                    face.vertexColors.push(vertexIdxToColor(face.a).clone());\n                    face.vertexColors.push(vertexIdxToColor(face.b).clone());\n                    face.vertexColors.push(vertexIdxToColor(face.c).clone());\n                } else console.assert(false);\n            }\n            geometry.colorsNeedUpdate = true;\n            return;\n\n            function vertexIdxToColor(vertexIdx) {\n                var x = Math.floor(vertexIdx % width);\n                var z = Math.floor(vertexIdx / width);\n                var height = heightMap[x][z];\n                return THREEx.Terrain.heightToColor(height);\n            }\n        };\n\n        /**\n         * give a color based on a given height\n         *\n         * @param {Number} height the height\n         * @return {THREE.Color} the color for this height\n         */\n        THREEx.Terrain.heightToColor = function () {\n            var color = new THREE.Color();\n            return function (height) {\n                // compute color based on height\n                if (height < 0.5) {\n                    height = height * 2 * 0.5 + 0.2;\n                    color.setRGB(0, 0, height);\n                } else if (height < 0.7) {\n                    height = (height - 0.5) / 0.2;\n                    height = height * 0.5 + 0.2;\n                    color.setRGB(0, height, 0);\n                } else {\n                    height = (height - 0.7) / 0.3;\n                    height = height * 0.5 + 0.5;\n                    color.setRGB(height, height, height);\n                }\n                // color.setRGB(1,1,1)\n                return color;\n            };\n        }();\n\n        //////////////////////////////////////////////////////////////////////////////////\n        //\t\tcomment\t\t\t\t\t\t\t\t//\n        //////////////////////////////////////////////////////////////////////////////////\n\n        /**\n         * plane geometry with THREE.Face3 from three.js r66\n         *\n         * @param {[type]} width          [description]\n         * @param {[type]} height         [description]\n         * @param {[type]} widthSegments  [description]\n         * @param {[type]} heightSegments [description]\n         */\n        THREEx.Terrain.PlaneGeometry = function (width, height, widthSegments, heightSegments) {\n\n            THREE.Geometry.call(this);\n\n            this.width = width;\n            this.height = height;\n\n            this.widthSegments = widthSegments || 1;\n            this.heightSegments = heightSegments || 1;\n\n            var ix, iz;\n            var width_half = width / 2;\n            var height_half = height / 2;\n\n            var gridX = this.widthSegments;\n            var gridZ = this.heightSegments;\n\n            var gridX1 = gridX + 1;\n            var gridZ1 = gridZ + 1;\n\n            var segment_width = this.width / gridX;\n            var segment_height = this.height / gridZ;\n\n            var normal = new THREE.Vector3(0, 0, 1);\n\n            for (iz = 0; iz < gridZ1; iz++) {\n\n                for (ix = 0; ix < gridX1; ix++) {\n\n                    var x = ix * segment_width - width_half;\n                    var y = iz * segment_height - height_half;\n\n                    this.vertices.push(new THREE.Vector3(x, -y, 0));\n                }\n            }\n\n            for (iz = 0; iz < gridZ; iz++) {\n\n                for (ix = 0; ix < gridX; ix++) {\n\n                    var a = ix + gridX1 * iz;\n                    var b = ix + gridX1 * (iz + 1);\n                    var c = ix + 1 + gridX1 * (iz + 1);\n                    var d = ix + 1 + gridX1 * iz;\n\n                    var uva = new THREE.Vector2(ix / gridX, 1 - iz / gridZ);\n                    var uvb = new THREE.Vector2(ix / gridX, 1 - (iz + 1) / gridZ);\n                    var uvc = new THREE.Vector2((ix + 1) / gridX, 1 - (iz + 1) / gridZ);\n                    var uvd = new THREE.Vector2((ix + 1) / gridX, 1 - iz / gridZ);\n\n                    var face = new THREE.Face3(a, b, d);\n                    face.normal.copy(normal);\n                    face.vertexNormals.push(normal.clone(), normal.clone(), normal.clone());\n\n                    this.faces.push(face);\n                    this.faceVertexUvs[0].push([uva, uvb, uvd]);\n\n                    face = new THREE.Face3(b, c, d);\n                    face.normal.copy(normal);\n                    face.vertexNormals.push(normal.clone(), normal.clone(), normal.clone());\n\n                    this.faces.push(face);\n                    this.faceVertexUvs[0].push([uvb.clone(), uvc, uvd.clone()]);\n                }\n            }\n\n            // this.computeCentroids();\n        };\n\n        THREEx.Terrain.PlaneGeometry.prototype = Object.create(THREE.Geometry.prototype);\n\n        var renderer = new THREE.WebGLRenderer({\n            antialias: true,\n            canvas: document.querySelector(\"#canvas3\")\n        });\n        /* Fullscreen */\n        renderer.setSize(window.innerWidth, window.innerHeight);\n        /* Append to HTML */\n        var onRenderFcts = [];\n        var scene = new THREE.Scene();\n        var camera = new THREE.PerspectiveCamera(25, window.innerWidth / window.innerHeight, 0.01, 1000);\n        /* Play around with camera positioning */\n        camera.position.z = 15;\n        camera.position.y = 2;\n        /* Fog provides depth to the landscape*/\n        scene.fog = new THREE.Fog(0x000, 0, 45);\n        (function () {\n            var light = new THREE.AmbientLight(0x202020);\n            scene.add(light);\n            var light = new THREE.DirectionalLight('white', 5);\n            light.position.set(0.5, 0.0, 2);\n            scene.add(light);\n            var light = new THREE.DirectionalLight('white', 0.75 * 2);\n            light.position.set(-0.5, -0.5, -2);\n            scene.add(light);\n        })();\n        var heightMap = THREEx.Terrain.allocateHeightMap(256, 256);\n        THREEx.Terrain.simplexHeightMap(heightMap);\n        var geometry = THREEx.Terrain.heightMapToPlaneGeometry(heightMap);\n        THREEx.Terrain.heightMapToVertexColor(heightMap, geometry);\n        /* Wireframe built-in color is white, no need to change that */\n        var material = new THREE.MeshBasicMaterial({\n            color: '#ffffff',\n            wireframe: true\n        });\n        var mesh = new THREE.Mesh(geometry, material);\n        scene.add(mesh);\n        mesh.lookAt(new THREE.Vector3(0, 1, 0));\n        /* Play around with the scaling */\n        mesh.scale.y = 3.5;\n        mesh.scale.x = 3;\n        mesh.scale.z = 0.20;\n        mesh.scale.multiplyScalar(10);\n        /* Play around with the camera */\n        onRenderFcts.push(function (delta, now) {\n            mesh.rotation.z += 0.025 * delta;\n        });\n        onRenderFcts.push(function () {\n            renderer.render(scene, camera);\n        });\n        var lastTimeMsec = null;\n        window.animFrame = requestAnimationFrame(function animate(nowMsec) {\n            requestAnimationFrame(animate);\n            lastTimeMsec = lastTimeMsec || nowMsec - 1000 / 60;\n            var deltaMsec = Math.min(200, nowMsec - lastTimeMsec);\n            lastTimeMsec = nowMsec;\n            onRenderFcts.forEach(function (onRenderFct) {\n                onRenderFct(deltaMsec / 1000, nowMsec / 1000);\n            });\n        });\n    });\n}//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ })

})